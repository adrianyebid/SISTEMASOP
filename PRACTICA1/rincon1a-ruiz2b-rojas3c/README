# Proyecto: Buscador de Autos por VIN y Marca

Este sistema permite buscar informaci√≥n de veh√≠culos a partir de un archivo CSV grande mediante dos criterios: VIN (Vehicle Identification Number) y marca (make), utilizando una implementaci√≥n en C con comunicaci√≥n entre procesos por FIFO.

---

## üìÅ Estructura de Archivos

* `p1-dataProgram.c`: proceso que indexa el dataset por VIN (usando tabla hash) y responde a consultas.
* `interfaz.c`: proceso interactivo que permite al usuario buscar por VIN o marca.
* `Makefile`: compila ambos programas.
* `car_prices_final.csv`: archivo de datos limpio que contiene las columnas: `year, make, model, transmission, odometer, vin`.

---

## ‚úÖ Requisitos cumplidos de la pr√°ctica

### 1. **B√∫squeda eficiente por VIN (clave primaria)**

* Implementada mediante una **tabla hash** con **listas enlazadas** para colisiones.
* Evita recorrer el archivo completo.
* B√∫squeda en <2 segundos.

### 2. **B√∫squeda por marca (make)**

* Implementada con lectura secuencial.
* Permite ver todos los autos por fabricante.

### 3. **Procesos no emparentados**

* `interfaz` y `buscador` son programas separados que se comunican por **FIFOs**.

### 4. **Comunicaci√≥n por FIFO (pipes nombrados)**

* FIFO `/tmp/fifo_peticion` para enviar peticiones.
* FIFO `/tmp/fifo_respuesta` para devolver resultados.

### 5. **Men√∫ interactivo de usuario**

* Opcion 1: Buscar por VIN.
* Opcion 2: Buscar por marca.
* Opcion 3: Salir.

### 6. **Control de errores y validaciones**

* VIN limpiado y normalizado (may√∫sculas, sin comillas o saltos de l√≠nea).
* Se imprime `NA` si no se encuentra el valor.
* Manejo de archivos nulos.

### 7. **Uso de punteros y memoria din√°mica**

* Se usa `malloc()` para crear registros en la tabla hash.
* `free()` es usado para liberar copias de l√≠neas al leer.
* Se usan punteros para manipular cadenas de texto y estructuras.

### 8. **Restricci√≥n de memoria (<10 MB)**

* Solo se guarda el VIN y offset en memoria (no toda la l√≠nea).
* El archivo completo **nunca se carga a RAM**.

### 9. **Archivo indexado**

* Aunque no se genera un archivo binario externo, el programa **indexa en tiempo de ejecuci√≥n** el VIN, cumpliendo el criterio de eficiencia.
* Se podr√≠a extender f√°cilmente para guardar esta tabla hash a disco en binario.

### 10. **Documentaci√≥n clara del dataset**

* Dataset reducido a 6 columnas clave: `year`, `make`, `model`, `transmission`, `odometer`, `vin`.
* VINs y marcas normalizados.
* Transmisi√≥n vac√≠a sustituida por `automatic`.

---

## üîß Compilaci√≥n

```bash
make
```

---

## üöÄ Ejecuci√≥n

### En una terminal:

```bash
./buscador
```

### En otra terminal:

```bash
./interfaz
```

---

## üßπ Limpieza

```bash
make clean
```

Elimina binarios y las FIFOs creadas.

---

## üë®üèª‚Äçüíª Autores

* Adri√°n Rinc√≥n
* Juan Ruiz
* Yerall Rojas
* Ingenier√≠a de Sistemas y Computaci√≥n
* Universidad / Curso: Sistemas Operativos

---

## üì¶ Entrega final

* `p1-dataProgram.c`: contiene `main` y l√≥gica de indexaci√≥n + servidor.
* `interfaz.c`: men√∫ para el usuario.
* `Makefile`: compila ambos programas.
* `car_prices_final.csv`: dataset limpio.
* `LEEME.txt` (este archivo).
* Todo el contenido se entrega en carpeta: `rincon-adrian`. Se entrega en clase o plataforma indicada por el docente.
